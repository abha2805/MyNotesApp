# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

image: docker:latest

services:
    - name: docker:dind
      alias: thedockerhost

variables:
    DOCKER_TLS_CERTDIR: ""

before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."
    - docker info
    - docker-compose build
    - docker-compose up -d

  tags:
    - docker

deploy-job:   # This job runs in the deploy stage.
  stage: deploy    # It only starts when the job in the build stage completes successfully.
  before_script:
  - echo "Docker ps."
  script:
  - echo "Deploying application..."
  - echo "Application successfully deployed."
  - docker ps
